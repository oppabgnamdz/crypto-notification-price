import { Telegraf, Markup, Context } from 'telegraf';
import config from './config';
import { connectToDatabase } from './controllers/database';
import {
	createNotification,
	getUserNotifications,
	deleteNotification,
} from './controllers/notification';
import { UserContext, ConversationState } from './models/userContext';
import { AlertType } from './models/notification';
import { getTokenNotificationsFromGist } from './controllers/gist';
import { initializeGist } from './controllers/initGist';
import { startPriceMonitoring, checkPrices } from './services/priceMonitor';

// Bi·∫øn ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i c·ªßa bot
let isBotRunning = false;

// T·∫°o h√†m kh·ªüi ƒë·ªông bot an to√†n
const startBot = async () => {
	// N·∫øu bot ƒë√£ ƒëang ch·∫°y, kh√¥ng kh·ªüi ƒë·ªông l·∫°i
	if (isBotRunning) {
		console.log('Bot ƒë√£ ƒëang ch·∫°y, b·ªè qua vi·ªác kh·ªüi ƒë·ªông l·∫°i');
		return;
	}

	try {
		// Kh·ªüi t·∫°o bot v·ªõi token
		const bot = new Telegraf(config.telegramToken);

		// K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu tr∆∞·ªõc
		await connectToDatabase();
		console.log('K·∫øt n·ªëi MongoDB th√†nh c√¥ng');

		// X·ª≠ l√Ω l·ªánh /start
		bot.command('start', (ctx) => {
			const userId = ctx.from.id;
			const userContext = UserContext.getOrCreate(userId);

			// Reset context v√† chuy·ªÉn sang tr·∫°ng th√°i ch·ªù nh·∫≠p token
			userContext.reset();
			userContext.state = ConversationState.WAITING_FOR_TOKEN;

			ctx.reply(
				'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Bot th√¥ng b√°o gi√°! Vui l√≤ng nh·∫≠p k√Ω hi·ªáu token b·∫°n mu·ªën theo d√µi (v√≠ d·ª•: BTC, ETH):'
			);
		});

		// Th√™m l·ªánh /myalerts ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng
		bot.command('myalerts', async (ctx) => {
			const userId = ctx.from.id;

			try {
				// L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng
				const notifications = await getUserNotifications(userId);

				if (notifications.length === 0) {
					ctx.reply(
						'B·∫°n ch∆∞a thi·∫øt l·∫≠p th√¥ng b√°o n√†o. S·ª≠ d·ª•ng l·ªánh /start ƒë·ªÉ t·∫°o th√¥ng b√°o m·ªõi.'
					);
					return;
				}

				let message = 'üìä *DANH S√ÅCH TH√îNG B√ÅO C·ª¶A B·∫†N* üìä\n\n';

				notifications.forEach((notification, index) => {
					const alertType =
						notification.alertType === AlertType.ABOVE
							? 'v∆∞·ª£t tr√™n'
							: 'xu·ªëng d∆∞·ªõi';

					message += `*${index + 1}. ${notification.tokenSymbol}*\n`;
					message += `   ƒêi·ªÅu ki·ªán: Gi√° ${alertType} $${notification.targetPrice}\n`;
					message += `   ID: \`${notification._id}\`\n\n`;
				});

				message +=
					'ƒê·ªÉ x√≥a m·ªôt th√¥ng b√°o, h√£y s·ª≠ d·ª•ng l·ªánh: `/delete ID_TH√îNG_B√ÅO`';

				ctx.reply(message, { parse_mode: 'Markdown' });
			} catch (error) {
				console.error('L·ªói khi l·∫•y danh s√°ch th√¥ng b√°o:', error);
				ctx.reply('ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch th√¥ng b√°o c·ªßa b·∫°n.');
			}
		});

		// Th√™m l·ªánh /delete ƒë·ªÉ x√≥a m·ªôt th√¥ng b√°o
		bot.command('delete', async (ctx) => {
			const userId = ctx.from.id;
			const messageText = ctx.message.text.trim();
			const parts = messageText.split(' ');

			if (parts.length !== 2) {
				ctx.reply(
					'C√∫ ph√°p kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng: `/delete ID_TH√îNG_B√ÅO`'
				);
				return;
			}

			const notificationId = parts[1];

			try {
				// X√°c minh th√¥ng b√°o t·ªìn t·∫°i v√† thu·ªôc v·ªÅ ng∆∞·ªùi d√πng n√†y
				const notifications = await getUserNotifications(userId);
				const targetNotification = notifications.find(
					(n) => n._id.toString() === notificationId
				);

				if (!targetNotification) {
					ctx.reply(
						'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o v·ªõi ID ƒë√£ cung c·∫•p ho·∫∑c th√¥ng b√°o kh√¥ng thu·ªôc v·ªÅ b·∫°n.'
					);
					return;
				}

				// X√≥a th√¥ng b√°o
				const success = await deleteNotification(notificationId);

				if (success) {
					ctx.reply(
						`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng th√¥ng b√°o cho ${targetNotification.tokenSymbol}.`
					);
				} else {
					ctx.reply('Kh√¥ng th·ªÉ x√≥a th√¥ng b√°o. Vui l√≤ng th·ª≠ l·∫°i sau.');
				}
			} catch (error) {
				console.error('L·ªói khi x√≥a th√¥ng b√°o:', error);
				ctx.reply('ƒê√£ x·∫£y ra l·ªói khi x√≥a th√¥ng b√°o.');
			}
		});

		// Th√™m l·ªánh /listgist ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ GitHub Gist
		bot.command('listgist', async (ctx) => {
			try {
				const tokens = await getTokenNotificationsFromGist();

				if (tokens.length === 0) {
					ctx.reply('Kh√¥ng c√≥ d·ªØ li·ªáu th√¥ng b√°o n√†o trong GitHub Gist.');
					return;
				}

				let message = 'Danh s√°ch th√¥ng b√°o trong GitHub Gist:\n\n';

				tokens.forEach((token, index) => {
					message += `${index + 1}. ${token.name} (${token.id})\n`;
					message += `   Ng∆∞·ª°ng: ${token.threshold} (${token.type === 'above' ? 'v∆∞·ª£t tr√™n' : 'd∆∞·ªõi'})\n`;
					message += `   ID Telegram: ${token.idTelegram || 'Kh√¥ng c√≥'}\n\n`;
				});

				ctx.reply(message);
			} catch (error) {
				console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ Gist:', error);
				ctx.reply('ƒê√£ x·∫£y ra l·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ GitHub Gist.');
			}
		});

		// Th√™m l·ªánh /initgist ƒë·ªÉ kh·ªüi t·∫°o Gist v·ªõi d·ªØ li·ªáu m·∫´u
		bot.command('initgist', async (ctx) => {
			try {
				await initializeGist();
				ctx.reply(
					'ƒê√£ kh·ªüi t·∫°o/c·∫≠p nh·∫≠t GitHub Gist v·ªõi d·ªØ li·ªáu m·∫´u th√†nh c√¥ng.'
				);
			} catch (error) {
				console.error('L·ªói khi kh·ªüi t·∫°o Gist:', error);
				ctx.reply('ƒê√£ x·∫£y ra l·ªói khi kh·ªüi t·∫°o GitHub Gist.');
			}
		});

		// Th√™m l·ªánh /forceprice ƒë·ªÉ ki·ªÉm tra lu·ªìng x·ª≠ l√Ω gi√°
		bot.command('forceprice', async (ctx) => {
			try {
				console.log(
					'\n[MANUAL] B·∫Øt ƒë·∫ßu ki·ªÉm tra gi√° theo y√™u c·∫ßu ng∆∞·ªùi d√πng...'
				);
				const userId = ctx.from.id;

				// L·∫•y th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng n√†y
				const notifications = await getUserNotifications(userId);

				if (notifications.length === 0) {
					ctx.reply(
						'B·∫°n ch∆∞a thi·∫øt l·∫≠p th√¥ng b√°o n√†o. S·ª≠ d·ª•ng l·ªánh /start ƒë·ªÉ t·∫°o th√¥ng b√°o.'
					);
					return;
				}

				// B√°o c√°o cho ng∆∞·ªùi d√πng
				ctx.reply(
					`ƒêang ki·ªÉm tra ${notifications.length} th√¥ng b√°o c·ªßa b·∫°n. Vui l√≤ng ƒë·ª£i...`
				);

				// G·ªçi tr·ª±c ti·∫øp h√†m checkPrices ƒë·ªÉ ki·ªÉm tra ngay l·∫≠p t·ª©c
				await checkPrices(bot);

				console.log('[MANUAL] ƒê√£ ho√†n t·∫•t ki·ªÉm tra gi√° theo y√™u c·∫ßu');
				// Th√¥ng b√°o ho√†n t·∫•t
				ctx.reply(
					'ƒê√£ ho√†n t·∫•t ki·ªÉm tra gi√°. N·∫øu c√≥ token n√†o ƒë·∫°t ng∆∞·ª°ng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o.'
				);
			} catch (error) {
				console.error('[ERROR] L·ªói khi ki·ªÉm tra gi√° th·ªß c√¥ng:', error);
				ctx.reply('ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ki·ªÉm tra gi√°.');
			}
		});

		// X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng
		bot.on('text', async (ctx) => {
			const userId = ctx.from.id;
			const userContext = UserContext.getOrCreate(userId);
			const messageText = ctx.message.text;

			switch (userContext.state) {
				case ConversationState.WAITING_FOR_TOKEN:
					// L∆∞u token v√† chuy·ªÉn sang b∆∞·ªõc ti·∫øp theo
					userContext.setupData.tokenSymbol = messageText.toUpperCase();
					userContext.state = ConversationState.WAITING_FOR_ALERT_TYPE;

					// Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn lo·∫°i th√¥ng b√°o
					ctx.reply(
						`B·∫°n mu·ªën nh·∫≠n th√¥ng b√°o khi gi√° ${userContext.setupData.tokenSymbol} nh∆∞ th·∫ø n√†o?`,
						Markup.inlineKeyboard([
							Markup.button.callback('Tr√™n ng∆∞·ª°ng gi√°', 'alert_above'),
							Markup.button.callback('D∆∞·ªõi ng∆∞·ª°ng gi√°', 'alert_below'),
						])
					);
					break;

				case ConversationState.WAITING_FOR_PRICE:
					// Ki·ªÉm tra gi√° nh·∫≠p v√†o c√≥ h·ª£p l·ªá kh√¥ng
					const price = parseFloat(messageText);

					if (isNaN(price) || price <= 0) {
						ctx.reply('Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá l·ªõn h∆°n 0:');
						return;
					}

					// L∆∞u gi√° v√† t·∫°o th√¥ng b√°o m·ªõi
					userContext.setupData.targetPrice = price;

					try {
						// T·∫°o th√¥ng b√°o m·ªõi trong c∆° s·ªü d·ªØ li·ªáu
						const alertType =
							userContext.setupData.alertType === 'above'
								? AlertType.ABOVE
								: AlertType.BELOW;

						const notification = await createNotification({
							userId: userId,
							tokenSymbol: userContext.setupData.tokenSymbol!,
							alertType: alertType,
							targetPrice: price,
						});

						// Th√¥ng b√°o th√†nh c√¥ng v√† reset context
						ctx.reply(
							`‚úÖ ƒê√£ thi·∫øt l·∫≠p th√†nh c√¥ng th√¥ng b√°o cho ${userContext.setupData.tokenSymbol}!\n` +
								`B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi gi√° ${alertType === AlertType.ABOVE ? 'v∆∞·ª£t qu√°' : 'gi·∫£m xu·ªëng d∆∞·ªõi'} ${price}.\n` +
								`D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MongoDB.\n` +
								`Ghi ch√∫: N·∫øu b·∫°n ƒë√£ c·∫•u h√¨nh GitHub Gist, d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô (n·∫øu token h·ª£p l·ªá).`
						);

						userContext.reset();
					} catch (error) {
						console.error('L·ªói khi t·∫°o th√¥ng b√°o:', error);
						ctx.reply('C√≥ l·ªói x·∫£y ra khi t·∫°o th√¥ng b√°o. Vui l√≤ng th·ª≠ l·∫°i sau.');
						userContext.reset();
					}
					break;

				default:
					// N·∫øu kh√¥ng trong tr·∫°ng th√°i h·ªôi tho·∫°i n√†o, ch·ªâ d·∫´n ng∆∞·ªùi d√πng
					ctx.reply(
						'Vui l√≤ng s·ª≠ d·ª•ng l·ªánh /start ƒë·ªÉ thi·∫øt l·∫≠p th√¥ng b√°o gi√° m·ªõi.'
					);
					break;
			}
		});

		// X·ª≠ l√Ω callback t·ª´ c√°c n√∫t nh·∫•n
		bot.action(['alert_above', 'alert_below'], (ctx) => {
			const userId = ctx.from?.id;

			if (!userId) {
				ctx.reply('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
				return;
			}

			const userContext = UserContext.getOrCreate(userId);

			// Ch·ªâ x·ª≠ l√Ω n·∫øu ƒëang ·ªü tr·∫°ng th√°i ch·ªù lo·∫°i th√¥ng b√°o
			if (userContext.state !== ConversationState.WAITING_FOR_ALERT_TYPE) {
				return;
			}

			// L·∫•y lo·∫°i th√¥ng b√°o t·ª´ callback data
			const action = String(ctx.match);
			const alertType = action === 'alert_above' ? 'above' : 'below';
			userContext.setupData.alertType = alertType;

			// Chuy·ªÉn sang tr·∫°ng th√°i ch·ªù nh·∫≠p gi√°
			userContext.state = ConversationState.WAITING_FOR_PRICE;

			const tokenSymbol = userContext.setupData.tokenSymbol;
			const alertTypeText =
				alertType === 'above' ? 'v∆∞·ª£t qu√°' : 'gi·∫£m xu·ªëng d∆∞·ªõi';

			ctx.reply(
				`Vui l√≤ng nh·∫≠p gi√° b·∫°n mu·ªën nh·∫≠n th√¥ng b√°o khi ${tokenSymbol} ${alertTypeText}:`
			);

			// Th·ª±c hi·ªán ho√†n t·∫•t callback ƒë·ªÉ ·∫©n n√∫t loading
			ctx.answerCbQuery();
		});

		// X·ª≠ l√Ω khi bot b·ªã t·∫Øt
		process.once('SIGINT', () => {
			isBotRunning = false;
			bot.stop('SIGINT');
		});
		process.once('SIGTERM', () => {
			isBotRunning = false;
			bot.stop('SIGTERM');
		});

		// Kh·ªüi ƒë·ªông bot
		await bot.launch();
		console.log('ü§ñ Bot Telegram ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!');
		isBotRunning = true;

		// Kh·ªüi ƒë·ªông lu·ªìng theo d√µi gi√° token
		console.log('‚è±Ô∏è B·∫Øt ƒë·∫ßu lu·ªìng theo d√µi gi√° (ki·ªÉm tra m·ªói 30 gi√¢y)...');
		console.log(
			'üìå Ki·ªÉm tra xem h√†m startPriceMonitoring c√≥ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a kh√¥ng:',
			typeof startPriceMonitoring === 'function' ? 'C√≥' : 'Kh√¥ng'
		);
		try {
			startPriceMonitoring(bot);
			console.log('‚úÖ ƒê√£ kh·ªüi ƒë·ªông th√†nh c√¥ng lu·ªìng theo d√µi gi√°.');
		} catch (monitoringError) {
			console.error(
				'‚ùå L·ªói khi kh·ªüi ƒë·ªông lu·ªìng theo d√µi gi√°:',
				monitoringError
			);
		}
		console.log('‚úÖ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng v√† ƒëang ch·∫°y.');
	} catch (error) {
		console.error('L·ªói khi kh·ªüi ƒë·ªông bot:', error);
		isBotRunning = false;
	}
};

// B·∫Øt ƒë·∫ßu bot
startBot();
