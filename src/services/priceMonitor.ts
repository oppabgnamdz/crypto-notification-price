import axios from 'axios';
import { Telegraf } from 'telegraf';
import Notification, { AlertType } from '../models/notification';
import config from '../config';

// Interface cho d·ªØ li·ªáu gi√° t·ª´ CoinGecko
interface CoinGeckoPrice {
	[key: string]: {
		usd: number;
	};
}

// Cache l∆∞u tr·ªØ gi√° token ƒë·ªÉ gi·∫£m s·ªë l∆∞·ª£ng request API
interface PriceCache {
	[tokenId: string]: {
		price: number;
		timestamp: number;
	};
}

// Cache l∆∞u gi√° token trong 120 gi√¢y
const priceCache: PriceCache = {};
// Th·ªùi gian cache h·ª£p l·ªá (120 gi√¢y - 2 ph√∫t)
const CACHE_TTL = 120 * 1000;
// ƒê·∫øm s·ªë l·∫ßn g·ªçi API ƒë·ªÉ gi·ªõi h·∫°n rate
let apiCallCount = 0;
let lastResetTime = Date.now();
// Gi·ªõi h·∫°n API CoinGecko mi·ªÖn ph√≠ l√† kho·∫£ng 10-30 request/ph√∫t
const API_RATE_LIMIT = 10;
const API_RATE_WINDOW = 60 * 1000; // 1 ph√∫t

// Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i c·ªßa service
let monitoringActive = false;
let monitoringIntervalId: NodeJS.Timeout | null = null;

// H√†m ƒë·ªÉ l·∫•y gi√° hi·ªán t·∫°i c·ªßa token t·ª´ CoinGecko API
const getTokenPrice = async (tokenId: string): Promise<number | null> => {
	// Ki·ªÉm tra cache tr∆∞·ªõc
	const cached = priceCache[tokenId];
	const now = Date.now();

	// S·ª≠ d·ª•ng gi√° t·ª´ cache n·∫øu c√≤n h·ª£p l·ªá
	if (cached && now - cached.timestamp < CACHE_TTL) {
		console.log(`[CACHE] S·ª≠ d·ª•ng gi√° cache cho ${tokenId}: $${cached.price}`);
		return cached.price;
	}

	// Ki·ªÉm tra v√† reset ƒë·∫øm rate limit
	if (now - lastResetTime > API_RATE_WINDOW) {
		console.log(`[RATE] Reset b·ªô ƒë·∫øm API: ${apiCallCount} ‚Üí 0`);
		apiCallCount = 0;
		lastResetTime = now;
	}

	// Ki·ªÉm tra n·∫øu ƒë√£ ƒë·∫°t gi·ªõi h·∫°n API
	if (apiCallCount >= API_RATE_LIMIT) {
		console.log(
			`[LIMIT] ƒê√£ ƒë·∫°t gi·ªõi h·∫°n API (${API_RATE_LIMIT} request/${API_RATE_WINDOW / 1000}s). D√πng cache n·∫øu c√≥ ho·∫∑c b·ªè qua.`
		);
		return cached ? cached.price : null;
	}

	try {
		// TƒÉng s·ªë l·∫ßn g·ªçi API
		apiCallCount++;

		// G·ªçi API CoinGecko mi·ªÖn ph√≠
		const url = `https://api.coingecko.com/api/v3/simple/price?ids=${tokenId}&vs_currencies=usd`;

		console.log(
			`[API] G·ªçi API CoinGecko cho ${tokenId} (l·∫ßn g·ªçi th·ª© ${apiCallCount}/${API_RATE_LIMIT} trong ph√∫t n√†y)`
		);
		const response = await axios.get<CoinGeckoPrice>(url);

		if (response.data && response.data[tokenId] && response.data[tokenId].usd) {
			const price = response.data[tokenId].usd;

			// L∆∞u v√†o cache
			priceCache[tokenId] = {
				price,
				timestamp: now,
			};

			console.log(`[SUCCESS] L·∫•y gi√° ${tokenId}: $${price}`);
			return price;
		}
		console.log(`[ERROR] Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu gi√° cho ${tokenId}`);
		return null;
	} catch (error) {
		console.error(`[ERROR] L·ªói khi l·∫•y gi√° c·ªßa ${tokenId}:`, error);
		// Tr·∫£ v·ªÅ gi√° cache c≈© n·∫øu c√≥, ngay c·∫£ khi ƒë√£ h·∫øt h·∫°n
		return cached ? cached.price : null;
	}
};

// Map tokenSymbol sang tokenId c·ªßa CoinGecko
// V√≠ d·ª•: BTC -> bitcoin, ETH -> ethereum
const getTokenIdFromSymbol = (symbol: string): string => {
	const tokenMap: Record<string, string> = {
		BTC: 'bitcoin',
		ETH: 'ethereum',
		BNB: 'binancecoin',
		SOL: 'solana',
		XRP: 'ripple',
		ADA: 'cardano',
		DOGE: 'dogecoin',
		DOT: 'polkadot',
		AVAX: 'avalanche-2',
		MATIC: 'matic-network',
		// Th√™m c√°c token kh√°c ·ªü ƒë√¢y
	};

	return tokenMap[symbol] || symbol.toLowerCase();
};

// H√†m g·ª≠i th√¥ng b√°o ƒë·∫øn user qua Telegram
const sendNotification = async (
	bot: Telegraf,
	userId: number,
	tokenSymbol: string,
	currentPrice: number,
	targetPrice: number,
	alertType: AlertType
): Promise<void> => {
	try {
		console.log(
			`[NOTIFY] ƒêang g·ª≠i th√¥ng b√°o v·ªÅ ${tokenSymbol} ƒë·∫øn user ${userId}`
		);

		const message =
			`üö® *C·∫¢NH B√ÅO GI√Å* üö®\n\n` +
			`Token: *${tokenSymbol}*\n` +
			`Gi√° hi·ªán t·∫°i: *$${currentPrice}*\n` +
			`Ng∆∞·ª°ng ƒë√£ ƒë·∫∑t: *$${targetPrice}*\n` +
			`ƒêi·ªÅu ki·ªán: Gi√° ${alertType === AlertType.ABOVE ? 'v∆∞·ª£t tr√™n' : 'xu·ªëng d∆∞·ªõi'} ng∆∞·ª°ng\n\n` +
			`Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;

		await bot.telegram.sendMessage(userId, message, { parse_mode: 'Markdown' });
		console.log(
			`[NOTIFY] ‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng ƒë·∫øn user ${userId} v·ªÅ token ${tokenSymbol}`
		);
	} catch (error) {
		console.error(
			`[ERROR] ‚ùå L·ªói khi g·ª≠i th√¥ng b√°o ƒë·∫øn user ${userId}:`,
			error
		);
	}
};

// H√†m ch√≠nh ƒë·ªÉ theo d√µi gi√° v√† ki·ªÉm tra c√°c notification
export const startPriceMonitoring = (bot: Telegraf): void => {
	// N·∫øu ƒë√£ ƒëang ch·∫°y, kh√¥ng kh·ªüi ƒë·ªông l·∫°i
	if (monitoringActive) {
		console.log('[MONITOR] Service ƒë√£ ƒëang ch·∫°y. B·ªè qua l·ªánh kh·ªüi ƒë·ªông.');
		return;
	}

	// Th√™m logs ban ƒë·∫ßu m·∫°nh m·∫Ω h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng h√†m ƒë∆∞·ª£c g·ªçi
	console.log('\n=================================================');
	console.log('üîÑ KH·ªûI ƒê·ªòNG THEO D√ïI GI√Å TOKEN');
	console.log('=================================================');
	console.log('[MONITOR] H·ªá th·ªëng s·∫Ω ki·ªÉm tra m·ªói 30 gi√¢y v√† g·ª≠i th√¥ng b√°o khi ƒë·∫°t ng∆∞·ª°ng gi√°');
	
	// ƒê√°nh d·∫•u service ƒëang ho·∫°t ƒë·ªông
	monitoringActive = true;

	// Th·ª±c hi·ªán ki·ªÉm tra ngay l·∫≠p t·ª©c khi kh·ªüi ƒë·ªông
	console.log('[MONITOR] Th·ª±c hi·ªán ki·ªÉm tra ƒë·∫ßu ti√™n...');
	
	// Ch·∫°y m·ªôt ki·ªÉm tra ngay l·∫≠p t·ª©c, nh∆∞ng ƒë·∫£m b·∫£o kh√¥ng ch·∫∑n lu·ªìng ch√≠nh
	setTimeout(async () => {
		try {
			await checkPrices(bot);
			console.log('[STARTUP] Ki·ªÉm tra ƒë·∫ßu ti√™n ho√†n t·∫•t');
		} catch (error) {
			console.error('[ERROR] L·ªói khi th·ª±c hi·ªán ki·ªÉm tra ban ƒë·∫ßu:', error);
		}
	}, 1000);

	// Thi·∫øt l·∫≠p interval ƒë·ªÉ ch·∫°y ki·ªÉm tra m·ªói 30 gi√¢y
	monitoringIntervalId = setInterval(async () => {
		try {
			console.log('\n[INTERVAL] Th·ª±c hi·ªán ki·ªÉm tra ƒë·ªãnh k·ª≥...');
			await checkPrices(bot);
		} catch (error) {
			console.error('[ERROR] L·ªói trong interval ki·ªÉm tra gi√°:', error);
		}
	}, 30000); // 30 gi√¢y

	console.log(`[MONITOR] ƒê√£ thi·∫øt l·∫≠p interval v·ªõi ID: ${monitoringIntervalId}`);

	// X·ª≠ l√Ω khi ·ª©ng d·ª•ng k·∫øt th√∫c
	const cleanup = () => {
		stopPriceMonitoring();
	};

	process.on('SIGINT', cleanup);
	process.on('SIGTERM', cleanup);
};

// H√†m ƒë·ªÉ d·ª´ng vi·ªác theo d√µi gi√°
export const stopPriceMonitoring = (): boolean => {
	if (!monitoringActive || !monitoringIntervalId) {
		console.log('[MONITOR] Service kh√¥ng ho·∫°t ƒë·ªông, kh√¥ng c·∫ßn d·ª´ng.');
		return false;
	}

	clearInterval(monitoringIntervalId);
	monitoringIntervalId = null;
	monitoringActive = false;

	console.log('[MONITOR] ƒê√£ d·ª´ng theo d√µi gi√° token.');
	return true;
};

// H√†m ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
export const isMonitoringActive = (): boolean => {
	return monitoringActive;
};

// T√°ch h√†m ki·ªÉm tra gi√° th√†nh m·ªôt h√†m ri√™ng bi·ªát ƒë·ªÉ d·ªÖ qu·∫£n l√Ω
export async function checkPrices(bot: Telegraf): Promise<void> {
	try {
		console.log('\n[MONITOR] ƒêang ki·ªÉm tra gi√° token...');

		// L·∫•y t·∫•t c·∫£ c√°c th√¥ng b√°o ƒëang ho·∫°t ƒë·ªông
		const activeNotifications = await Notification.find({ isActive: true });

		if (activeNotifications.length === 0) {
			console.log('[MONITOR] Kh√¥ng c√≥ th√¥ng b√°o n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ ki·ªÉm tra');
			return; // Kh√¥ng c√≥ th√¥ng b√°o n√†o ƒë·ªÉ ki·ªÉm tra
		}

		console.log(`[MONITOR] T√¨m th·∫•y ${activeNotifications.length} th√¥ng b√°o ƒëang ho·∫°t ƒë·ªông`);

		// Nh√≥m c√°c th√¥ng b√°o theo token ƒë·ªÉ tr√°nh g·ªçi API nhi·ªÅu l·∫ßn cho c√πng m·ªôt token
		const tokenGroups = activeNotifications.reduce<Record<string, typeof activeNotifications>>(
			(groups, notification) => {
				const symbol = notification.tokenSymbol;
				if (!groups[symbol]) {
					groups[symbol] = [];
				}
				groups[symbol].push(notification);
				return groups;
			},
			{}
		);

		const tokenSymbols = Object.keys(tokenGroups);
		console.log(`[MONITOR] Token c·∫ßn ki·ªÉm tra (${tokenSymbols.length}): ${tokenSymbols.join(', ')}`);

		// X·ª≠ l√Ω t·ª´ng nh√≥m token
		for (const [symbol, notifications] of Object.entries(tokenGroups)) {
			console.log(`[MONITOR] ƒêang ki·ªÉm tra gi√° cho ${symbol}...`);
			const tokenId = getTokenIdFromSymbol(symbol);
			const price = await getTokenPrice(tokenId);

			if (price === null) {
				console.log(`[MONITOR] Kh√¥ng th·ªÉ l·∫•y gi√° cho token ${symbol}, b·ªè qua`);
				continue;
			}

			console.log(`[MONITOR] Gi√° hi·ªán t·∫°i c·ªßa ${symbol}: $${price}`);
			console.log(`[MONITOR] Ki·ªÉm tra ${notifications.length} th√¥ng b√°o cho ${symbol}`);

			// Ki·ªÉm tra m·ªói th√¥ng b√°o cho token n√†y
			for (const notification of notifications) {
				const { userId, targetPrice, alertType } = notification;

				try {
					// Ki·ªÉm tra ƒëi·ªÅu ki·ªán c·∫£nh b√°o m·ªôt c√°ch r√µ r√†ng h∆°n
					let shouldAlert = false;
					
					if (alertType === AlertType.ABOVE && price >= targetPrice) {
						console.log(`[TRIGGER] Gi√° ${symbol} ($${price}) ‚â• ng∆∞·ª°ng tr√™n ($${targetPrice})`);
						shouldAlert = true;
					} else if (alertType === AlertType.BELOW && price <= targetPrice) {
						console.log(`[TRIGGER] Gi√° ${symbol} ($${price}) ‚â§ ng∆∞·ª°ng d∆∞·ªõi ($${targetPrice})`);
						shouldAlert = true;
					}

					if (shouldAlert) {
						console.log(`[ALERT] G·ª≠i c·∫£nh b√°o cho user ${userId} v·ªÅ token ${symbol}`);
						// G·ª≠i th√¥ng b√°o ƒë·∫øn user - ƒë·∫£m b·∫£o h√†m n√†y ho·∫°t ƒë·ªông ƒë√∫ng
						await sendNotification(bot, userId, symbol, price, targetPrice, alertType);
						console.log(`[ALERT] ƒê√£ g·ª≠i c·∫£nh b√°o th√†nh c√¥ng cho user ${userId}`);
					} else {
						console.log(`[CHECK] ${symbol}: $${price} ch∆∞a ƒë·∫°t ng∆∞·ª°ng $${targetPrice} (${alertType})`);
					}
				} catch (notifyError) {
					console.error(`[ERROR] L·ªói khi x·ª≠ l√Ω th√¥ng b√°o cho ${symbol}:`, notifyError);
				}
			}
		}

		console.log('[MONITOR] Ho√†n t·∫•t ki·ªÉm tra gi√° token');
	} catch (error) {
		console.error('[ERROR] L·ªói trong qu√° tr√¨nh theo d√µi gi√°:', error);
	}
}
